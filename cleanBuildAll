@default dotnetCompiler csc
@windows    @default dotnetLoader ""
@notwindows @default dotnetLoader "mono"
@default dCompiler dmd

@windows    @set libext .lib
@notwindows @set libext .a

@rm out

# download dependencies (i.e. DerelictUtil)
rund minish.d downloadDeps

# build the ClrBridge.dll .NET library
rund minish.d buildClrBridge dotnetCompiler=${dotnetCompiler} dotnetLoader=${dotnetLoader}

# at this point the noCodegenExample.d should work this example
# uses ClrBridge.dll to call into .NET code, but doesn't require any generated code
# for some reason, this fails on windows without the "-g" option
rund -g noCodegenExample.d

# build the ClrBridgeCodgen.exe .NET executable
# this tool will take an assembly and generate D code to easily call into it
rund minish.d buildClrBridgeCodegen dotnetCompiler=${dotnetCompiler}

# invoke ClrBridgeCodegen.exe to generate D wrapper code for common .NET libraries
rund minish.d generateDWrappers dotnetCompiler=${dotnetCompiler} dotnetLoader=${dotnetLoader}

# invoke ClrBridgeCodegen.exe to generate D wrapper code for common .NET libraries
rund minish.d compileDWrappers dCompiler=${dCompiler}

# run unit tests
rund minish.d runUnitTests dotnetCompiler=${dotnetCompiler} dotnetLoader=${dotnetLoader}

# execute the example that uses the code from generateDWrappers
# rund example.d (use this when rund supports -i=-mscorlib and windows/linux library extensions)
rund -i=-mscorlib out/dlibs/mscorlib${libext} example.d

# build the ClrCallbackHost.exe .NET executable
rund minish.d buildClrCallbackHost dotnetCompiler=${dotnetCompiler} dotnetLoader=${dotnetLoader}

# run the callbackHostExample
rund minish.d runCallbackHostExample dotnetLoader=${dotnetLoader}

# run coreclr host tests
rund test/coreclrhostdriver.d

# run callback host tests
rund minish.d runCallbackHostTests
